### Complete Blog Website Documentation

This document provides a comprehensive overview of your complete blog website, including both the frontend and backend components.

## Backend Structure (Node.js/Express)

The backend follows an MVC architecture:

### Main Files

- `server.js` - Entry point for the application
- `app.js` - Express application setup with middleware


### Controllers

- `authController.js` - Handles user authentication (login, signup, password reset)
- `userController.js` - Manages user operations (get profile, update profile)
- `postController.js` - Handles blog post operations (create, read, update, delete)
- `errorController.js` - Global error handling


### Models

- `userModel.js` - User data schema and methods
- `postModel.js` - Blog post data schema and relationships


### Routes

- `authRoutes.js` - Authentication endpoints
- `postRoutes.js` - Blog post endpoints


### Utils

- `AppError.js` - Custom error class
- `catchAsync.js` - Async error handling wrapper
- `email.js` - Email functionality
- `emailConfig.js` - Email configuration


## Frontend Structure (Next.js)

The frontend is built with Next.js using the App Router:

### Main Pages

- `app/page.tsx` - Homepage with featured and recent posts
- `app/posts/page.tsx` - All posts listing with search
- `app/posts/[slug]/page.tsx` - Individual post view
- `app/posts/create/page.tsx` - Create new post form
- `app/auth/login/page.tsx` - Login page
- `app/auth/register/page.tsx` - Registration page
- `app/profile/page.tsx` - User profile management
- `app/about/page.tsx` - About page
- `app/contact/page.tsx` - Contact page


### Components

- `components/navbar.tsx` - Navigation bar with authentication state
- `components/footer.tsx` - Site footer
- `components/featured-posts.tsx` - Featured posts display
- `components/recent-posts.tsx` - Recent posts display
- `components/mode-toggle.tsx` - Dark/light theme toggle


### Utilities

- `lib/utils.ts` - Helper functions and API connection utilities


## API Connection

The frontend and backend connect through REST API endpoints:

### Authentication Endpoints

- `POST /users/signup` - Register a new user
- `POST /users/login` - Log in a user
- `PATCH /users/updateMe` - Update user profile
- `PATCH /users/updateMyPassword` - Update user password


### Post Endpoints

- `GET /posts` - Get all posts
- `GET /posts/:id` - Get a specific post
- `POST /posts` - Create a new post
- `PATCH /posts/:id` - Update a post
- `DELETE /posts/:id` - Delete a post


## Environment Setup

### Backend Environment Variables

Required in a `Config.env` file:

- `DATABASE` - MongoDB connection string
- `JWT_SECRET` - Secret for JWT token generation
- `JWT_EXPIRES_IN` - JWT token expiration time
- `EMAIL_USERNAME` - Email service username
- `EMAIL_PASSWORD` - Email service password
- `EMAIL_HOST` - Email service host
- `EMAIL_PORT` - Email service port


### Frontend Environment Variables

Required in `.env.local` or Vercel project settings:

- `NEXT_PUBLIC_API_URL` - URL of the backend API


## Deployment Instructions

### Backend Deployment

1. Set up a MongoDB database
2. Configure environment variables
3. Deploy to a Node.js hosting service (Heroku, DigitalOcean, etc.)


### Frontend Deployment

1. Set the `NEXT_PUBLIC_API_URL` to point to your deployed backend
2. Deploy to Vercel or another Next.js-compatible hosting service


## Authentication Flow

1. User registers or logs in through the frontend
2. Backend validates credentials and returns a JWT token
3. Frontend stores the token in localStorage
4. Frontend includes the token in the Authorization header for protected requests
5. Backend validates the token for protected routes


## Post Management Flow

1. Authenticated users can create posts through the frontend form
2. Posts are stored in the MongoDB database through the backend API
3. All users can view posts on the homepage and posts listing page
4. Only the author of a post can edit or delete it


This comprehensive documentation covers both the frontend and backend components of your blog website, how they're structured, and how they work together.